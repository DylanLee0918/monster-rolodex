{"version":3,"sources":["Components/search-box/SearchBox.jsx","Components/card/Card.jsx","Components/card-list/CardList.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","src","monster","id","alt","name","email","CardList","console","log","monsters","map","App","state","searchField","bind","users","this","setState","e","target","value","fetch","then","response","json","monsterData","filteredMonsters","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAgBeA,EAbG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC7B,OACI,8BACI,uBACIC,UAAU,SACVC,KAAK,SACLH,YAAaA,EACbI,SAAUH,OCGXI,G,MAVF,SAACC,GACV,OACI,sBAAKJ,UAAU,iBAAf,UACI,qBAAKK,IAAG,+BAA0BD,EAAME,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKJ,EAAME,QAAQG,OACnB,4BAAIL,EAAME,QAAQI,aCJjBC,G,MAAW,SAAAP,GAEpB,OADAQ,QAAQC,IAAIT,GAER,qBAAKJ,UAAU,YAAf,SAEMI,EAAMU,SAASC,KAAI,SAACT,GAAD,OACjB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCqCpBS,G,wDAzCb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXH,SAAU,GACVI,YAAa,IAGf,EAAKA,YAAc,EAAKA,YAAYC,KAAjB,gBARP,E,+CAWd,SAAYC,GACVC,KAAKC,SAAS,CAAER,SAAUM,M,yBAG5B,SAAYG,GACVF,KAAKC,SAAS,CAAEJ,YAAaK,EAAEC,OAAOC,U,+BAGxC,WAAqB,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAP,GAAK,OAAI,EAAKU,YAAYV,Q,oBAGlC,WAAU,IAAD,EACyBC,KAAKJ,MAA9BH,EADA,EACAA,SAAUI,EADV,EACUA,YACXa,EAAmBjB,EAASkB,QAAO,SAAC1B,GAAD,OAAaA,EAAQG,KAAKwB,cAAcC,SAAShB,EAAYe,kBACtG,OACE,sBAAKjC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEF,YAAY,kBACZC,aAAcsB,KAAKH,cAErB,cAAC,EAAD,CAAUJ,SAAUiB,W,GApCVI,IAAMC,YCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c48852fe.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../search-box/SearchBox.css'\r\n\r\nconst SearchBox = ({placeholder, handleChange}) => {\r\n    return (\r\n        <div>\r\n            <input \r\n                className=\"search\"\r\n                type=\"search\" \r\n                placeholder={placeholder} \r\n                onChange={handleChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","import React from 'react' \r\nimport '../card/Card.css'\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\" />\r\n            <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react'\r\nimport Card from '../card/Card'\r\nimport '../card-list/CardList.css'\r\n\r\nexport const CardList = props => {\r\n    console.log(props)\r\n    return (\r\n        <div className=\"card-list\">\r\n            {\r\n              props.monsters.map((monster) => \r\n                <Card key={monster.id} monster={monster} />\r\n              )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\nimport SearchBox from './Components/search-box/SearchBox'\nimport { CardList } from './Components/card-list/CardList'\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n\n    this.searchField = this.searchField.bind(this);\n  }\n\n  monsterData(users) {\n    this.setState({ monsters: users })\n  }\n\n  searchField(e) {\n    this.setState({ searchField: e.target.value })\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.monsterData(users)) \n  }\n\n  render() {\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter((monster) => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return(\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"search monsters\" \n          handleChange={this.searchField}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}